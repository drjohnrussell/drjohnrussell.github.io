{
  "hash": "686eeb124babf604d3390b6d1b5201ec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using fuzzyjoin to work with NCES data\"\ndescription: \"Demonstrating how fuzzyjoin can help you with messy data through an example using school names within the Virgin Islands\"\ndate: 01-17-2025\ncategories: [R, Data Wrangling] # self-defined categories\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Code in R\"\n    toc: TRUE\n    toc_float: TRUE\nexecute:\n  warning: false\ncitation: \n  url: https://drjohnrussell.github.io/posts/2025-01-17-fuzzyjoin-in-action/ \nimage: img/Virgin_Islands.svg\ndraft: true # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\n# Battling first child amnesia\n\nI am a father of two sons; one 4.5 years old, and the other is but a few months. This may seem weird, but even though I went through everything with my first son... I have complete amnesia about what was normal, what napping schedules were like, and such-like at this age.\n\nFortunately, we used a baby tracker, which allowed me to export a csv. What a golden opportunity for some data visualization!\n\nLet's just load up the library and take a look...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n\nchild <- read_csv(\"https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv\")\n\nhead(child)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  Baby       Time              `Duration (min)`\n  <chr>      <chr>                        <dbl>\n1 First-Born 10/23/20 4:30 AM                60\n2 First-Born 10/23/20 6:00 AM                55\n3 First-Born 10/23/20 8:31 AM                39\n4 First-Born 10/23/20 11:13 AM               28\n5 First-Born 10/23/20 3:49 PM                14\n6 First-Born 10/23/20 7:16 PM               298\n```\n\n\n:::\n:::\n\n\n|> \n  mutate(starttime=mdy_hm(Time),\n         endtime=starttime+minutes(`Duration (min)`))\n## separate the ones that go over multiple days\n\nViggo <- read_csv(\"Viggo_sleep.csv\") |> \n  mutate(starttime=mdy_hm(Time),\n         endtime=starttime+minutes(`Duration (min)`))\n\nElginmultiple <- Elgin |> \n  filter(day(starttime)!=day(endtime))\n\n\nViggomultiple <- Viggo |> \n  filter(day(starttime)!=day(endtime))\n\nElgin1 <- Elginmultiple |> \n  mutate(endtime=make_datetime(year(starttime),month(starttime),day(starttime),hour=23,min=59,sec=0))\nElgin2 <- Elginmultiple |> \n  mutate(starttime=make_datetime(year(endtime),month(endtime),day(endtime),hour=0,min=0))\n\nViggo1 <- Viggomultiple |> \n  mutate(endtime=make_datetime(year(starttime),month(starttime),day(starttime),hour=23,min=59,sec=0))\nViggo2 <- Viggomultiple |> \n  mutate(starttime=make_datetime(year(endtime),month(endtime),day(endtime),hour=0,min=0))\n\n\n\nbirth <- mdy(\"05-30-20\")\nbirthViggo <- mdy(\"07-28-24\")\n\nElgin <- Elgin |> \n  filter(day(starttime)==day(endtime)) |> \n  bind_rows(Elgin1,Elgin2)\n\nElgin2 <- Elgin |> \n  mutate(daysold=floor(difftime(starttime,birth,units=\"weeks\")),\n         dayweek=wday(starttime,label=TRUE,abbr=FALSE,week_start=7),\n         starthour=hm(paste0(hour(starttime),\":\",minute(starttime))),\n         endhour=hm(paste0(hour(endtime),\":\",minute(endtime))))\n\n\nViggo <- Viggo |> \n  filter(day(starttime)==day(endtime)) |> \n  bind_rows(Viggo1,Viggo2)\n\nViggo2 <- Viggo |> \n  mutate(daysold=floor(difftime(starttime,birthViggo,units=\"weeks\")),\n         dayweek=wday(starttime,label=TRUE,abbr=FALSE,week_start=7),\n         starthour=hm(paste0(hour(starttime),\":\",minute(starttime))),\n         endhour=hm(paste0(hour(endtime),\":\",minute(endtime))))\n\n\nnursing <- read_csv(\"Elgin Russell_nursing.csv\") |> \n  mutate(Time=mdy_hm(Time)) |> \n  select(Time)\n\nmilk <- read_csv(\"Elgin Russell_expressed.csv\") |> \n  mutate(Time=mdy_hm(Time)) |> \n  select(Time) |> \n  bind_rows(nursing)\n\nElginmilk <- milk |> \n  mutate(daysold=floor(difftime(Time,birth,units=\"weeks\")),\n         dayweek=wday(Time,label=TRUE,abbr=FALSE,week_start=7),\n         hour=hm(paste0(hour(Time),\":\",minute(Time)))) |> \n  filter(daysold>20,\n         daysold<30)\n\n\nBREAKS <- c(0:12)*7200\n\nElgin2 |> \n  filter(daysold>20,\n         daysold<30) |> \n  ggplot() +\n  geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,\n                                    xmax=as.numeric(dayweek)+.45,\n                                    ymin=starthour,\n                                    ymax=endhour),fill=\"blue\", alpha=.5) +\n  geom_rect(data=Viggo2 |> \n              filter(daysold>20),\n            mapping=aes(xmin=as.numeric(dayweek)-.45,\n                        xmax=as.numeric(dayweek)+.45,\n                        ymin=starthour,\n                        ymax=endhour),fill=\"green\", alpha=.5) +\n  facet_wrap(~daysold) +\n  geom_point(data=Elginmilk,\n             mapping=aes(x=as.numeric(dayweek),\n                         y=hour),color=\"pink\") +\n  scale_y_time(breaks=BREAKS) +\n  scale_x_continuous(breaks=seq_along(levels(Elgin2$dayweek)), labels=levels(Elgin2$dayweek)) +\n  labs(x=\"\",y=\"\")\n  \n\nround(difftime(today(),mdy(\"07-28-24\"),units=\"weeks\"),0)\n  \nggsave(\"Elgin.svg\",width=11,height=18,units=\"in\")\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}