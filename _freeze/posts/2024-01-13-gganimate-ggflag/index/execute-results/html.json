{
  "hash": "54ccb5f4fa405b1f7c7ccabe9ddf8aac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using gganimate and ggflags to look at democratic progress\"\ndescription: \"Using a TidyTuesday dataset to experiment with gif packages\"\ndate: 01-13-2025\ncategories: [Quarto, R, Geography] # self-defined categories\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Code in R\"\n    toc: TRUE\n    toc_float: TRUE\nexecute:\n  warning: false\ncitation: \n  url: https://drjohnrussell.github.io/posts/2024-01-13-gganimate-ggflag/ \nimage: img/Europe.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n## Loading and Exploring a Tidy Tuesday Dataset\n\nOne of my New Year's resolutions was to become less of a lurker and more of a doer within the Tidy Tuesday community. There had been one dataset that I was super interested in exploring, based on [Democracy and Dictatorship](https://github.com/rfordatascience/tidytuesday/blob/main/data/2024/2024-11-05/readme.md). Loaded the dataset and a few packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nlibrary(countrycode) #this package looks up ISO codes, which can be useful\nlibrary(ggflags) #pulls flags\nlibrary(gganimate) #animations\n\ndat <- tidytuesdayR::tt_load(2024, week = 45)\ndemocracy <- dat$democracy_data\n\nhead(democracy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 43\n  country_name country_code  year regime_category_index regime_category   \n  <chr>        <chr>        <dbl>                 <dbl> <chr>             \n1 Afghanistan  AFG           1950                     5 Royal dictatorship\n2 Afghanistan  AFG           1951                     5 Royal dictatorship\n3 Afghanistan  AFG           1952                     5 Royal dictatorship\n4 Afghanistan  AFG           1953                     5 Royal dictatorship\n5 Afghanistan  AFG           1954                     5 Royal dictatorship\n6 Afghanistan  AFG           1955                     5 Royal dictatorship\n# ℹ 38 more variables: is_monarchy <lgl>, is_commonwealth <lgl>,\n#   monarch_name <chr>, monarch_accession_year <dbl>, monarch_birthyear <dbl>,\n#   is_female_monarch <lgl>, is_democracy <lgl>, is_presidential <lgl>,\n#   president_name <chr>, president_accesion_year <dbl>,\n#   president_birthyear <dbl>, is_interim_phase <lgl>,\n#   is_female_president <lgl>, is_colony <lgl>, colony_of <chr>,\n#   colony_administrated_by <chr>, is_communist <lgl>, …\n```\n\n\n:::\n:::\n\n\nThis dataset shows, for every year from 1950 to 2000, classifications for countries around the world. In the spirit of January 6th, I chose to focus on whether countries have free and fair elections, here shown as `has_free_and_fair_election`.\n\nIn the interest of this exploration, I'm not interested in colonies, which are shown as `NA` in the `regime_category_index`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracy <- democracy |> \n  ## removing colonies as much as possible to get down to countries\n  filter(!is.na(regime_category_index),\n         ## British Virgin Islands oddly keeps showing up in spite of status as colony\n         country_code!=\"VGB\") \n```\n:::\n\n\n### First exploration - understanding areas with democratic changes\n\nMy first inclination in the dataset was to take out the countries that only had free and fair elections or a lack thereof, in order to understand places that had democratic progress and democratic backsliding. This required setting up a filter for this work. `tabyl` from the janitor package is well set up for this, as it will quickly come up with cross counts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracyfilter <- democracy |> \n  janitor::tabyl(country_name,has_free_and_fair_election) |> \n  filter(`TRUE` > 0 & `FALSE` > 0)\n```\n:::\n\n\nThis gives a nice filter for this work. In order to use the [ggflags](https://github.com/jimjam-slam/ggflags) package, you need for the countries to be spelled out in iso2c format. Fortunately, the amazing [countrycodes](https://github.com/vincentarelbundock/countrycode) package will do that for you, and in addition, it can provide the continent for you as well, for additional explorations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocraticchanges <- democracy |> \n  inner_join(democracyfilter) |> \n  mutate(iso2=countrycode(country_name,\"country.name\",\"iso2c\"),\n         continent = countrycode(iso2, \"iso2c\", \"continent\")) |> \n  arrange(continent,`FALSE`) |> \n         mutate(country_name=fct_inorder(country_name))\n```\n:::\n\nNow we are ready to plot this with the help of the `ggflags` package. Let's look at Europe and Africa, two continents associated with democratic progress and backsliding.\n\nThere is one big issue - we would like for this to show up as continuous bars, which your typical geoms will not do. However, we can think of the bars as parts of a rectangle, that extend from the beginning to end of each year. If we factor the countries, we can then plot them and rename the y axis at the end.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Let's create the y-labels for later on\ny_lab <- democraticchanges |> \n  distinct(country_name,iso2,continent)  |> \n  mutate(y_mid = as.numeric(country_name),\n         name=country_name)\n## For Africa\nAfrica <- democraticchanges |> \n  filter(continent==\"Africa\") |> \n  ggplot(aes(xmin=year, #left boundary of the rectangle\n             xmax=year+1, #right boundary of the rectangle\n             ymin=as.numeric(country_name)-.3, #lower boundary of the rectangle\n             ymax=as.numeric(country_name)+.3, #upper boundary of the rectangle\n             fill=has_free_and_fair_election)) +\n  geom_rect() +\n  # now let's plot flags between the rectangles and the y axis\n  ggflags::geom_flag(data=y_lab |> \n                       filter(continent==\"Africa\"),\n                     mapping=aes(y=y_mid,\n                                 country=tolower(iso2), #ggflags needs lowercase iso2 to work\n                                 x=1945),\n                     inherit.aes=FALSE) + #we want this to be individual to this layer\n                     #now to rename the y axis\n  scale_y_continuous(breaks=y_lab$y_mid,labels=y_lab$country_name) +\n  theme_minimal() +\n  theme(legend.position=\"bottom\",\n        legend.text=element_text(size=7),\n        legend.title=element_text(size=7)) +\n  labs(x=\"\",\n       y=\"\",\n       fill=\"Has Free and Fair Elections\") +\n  scale_fill_brewer(palette=\"Set1\") +\n  facet_wrap(~continent,ncol=1,scales=\"free\",strip.position=\"right\")\n\nEurope <- democraticchanges |> \n  filter(continent==\"Europe\") |> \n  ggplot(aes(xmin=year,\n             xmax=year+1,\n             ymin=as.numeric(country_name)-.3,\n             ymax=as.numeric(country_name)+.3,\n             fill=has_free_and_fair_election)) +\n  geom_rect() +\n  ggflags::geom_flag(data=y_lab |> \n                       filter(continent==\"Europe\"),\n                     mapping=aes(y=y_mid,country=tolower(iso2),x=1945),inherit.aes=FALSE) +\n  scale_y_continuous(breaks=y_lab$y_mid,labels=y_lab$country_name) +\n  theme_minimal() +\n  theme(legend.position=\"bottom\",\n        legend.text=element_text(size=7),\n        legend.title=element_text(size=7)) +\n  labs(x=\"\",\n       y=\"\",\n       fill=\"Has Free and Fair Elections\") +\n  scale_fill_brewer(palette=\"Set1\") +\n  facet_wrap(~continent,ncol=1,scales=\"free\",strip.position=\"right\")\n\n## Let's take advantage of patchwork to plot these graphs next to each other with a common legend\nlibrary(patchwork)\nEurope + Africa + plot_layout(guides = 'collect') & theme(legend.position = 'bottom')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis is fun! Let's make a map and animate it.\n\n### gganimation for a map to show progress/backsliding\n\nOne can see at a glance that, in Europe, there appears to be a democratic progression. Similarly, in Africa, there is a progression, but there is also backsliding. It would also be really useful to see this as a map - moreover, it would be really interesting to see as an animated map.\n\n`rnaturalearth` is a package that allows you to easily download map borders. [Patrice Ferlet](https://gist.github.com/metal3d) keeps a dataset of the centroid for countries that we can plot the flags on as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\n\nworld <- ne_countries(type=\"countries\",returnclass=\"sf\")\n\ncoord <- read_csv(\"https://gist.github.com/metal3d/5b925077e66194551df949de64e910f6/raw/c5f20a037409d96958553e2eb6b8251265c6fd63/country-coord.csv\") |> \n  mutate(`Alpha-2 code`=replace_na(`Alpha-2 code`,\"NA\")) |> \n  rename(code=`Alpha-2 code`,\n         lat=`Latitude (average)`,\n         lon=`Longitude (average)`)\n```\n:::\n\n\nNow let's take the democracy dataset from earlier, and `left_join` the dataset to the lat/long dataset as well as the world dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracymap <- democracy |> \n  mutate(iso2=countrycode(country_name,\"country.name\",\"iso2c\"),\n         continent = countrycode(iso2, \"iso2c\", \"continent\")) |> \n  select(country_name,year,has_free_and_fair_election,iso2,continent) |> \n  left_join(coord |>\n              select(code,lat,lon),by=c(\"iso2\"=\"code\"))\n\ndemocracymap <- democracymap |> \n  select(country_name,year,has_free_and_fair_election,iso2,lat,lon) |> \n  left_join(world, by=c(\"iso2\"=\"iso_a2_eh\")) |> \n  filter(!is.na(geometry)) |> \n  mutate(year=as.integer(year)) #this is necessary for the animation to progress frame by frame\n```\n:::\n\n\nWe build this layer by layer. We want a base map of current boundaries, so we can take the current dataset and bring in one year's worth of data.\n\n::: {.cell}\n\n```{.r .cell-code}\nmap <- democracymap |> \n  filter(year==2020, !is.na(geometry)) |> \n  select(-year)\n\nmap |> \n  ggplot() + geom_sf(aes(geometry=geometry))\n```\n\n::: {.cell-output-display}\n![World Map](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThen we can layer this map easily. Notice that the latitude and longitude signs are not typical of a map - the excellent [metR](https://github.com/eliocamp/metR) package includes helpful themes and scales for meteorological data, which applies to maps as well!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemocracymap2 <- democracymap |> \n  filter(has_free_and_fair_election==TRUE)\n\nlibrary(metR)\n\nmap |> \n  ggplot() +\n  geom_sf(mapping=aes(geometry=geometry),fill=\"white\",color=\"black\") +\n  geom_sf(data=democracymap2,\n          mapping=aes(geometry=geometry),color=NA,fill=\"blue\",\n          show.legend=FALSE)+\n  scale_x_longitude() +\n  scale_y_latitude() +\n  facet_wrap(~year) +\n  theme_bw() +\n  theme(axis.text=element_blank(),\n        axis.ticks=element_blank(),\n        strip.text=element_text(size=8,\n                                margin = margin(0,0,0,0, \"cm\")))\n```\n\n::: {.cell-output-display}\n![A facet of the world](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis map is a bit overwhelming, let's use `gganimate` and focus on Europe and Africa. Comments below to walk through the European one. Because it's tough to render, I saved it locally and then loaded it up on the website. Hooray!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Europe\n#First a base layer\nEurope2 <- map |> \n  filter(continent==\"Europe\") |> \n  ggplot() +\n  # note that fill is the inside and color is the border in geom_sf\n  geom_sf(mapping=aes(geometry=geometry),fill=\"white\",color=\"black\") +\n#Then the democracy data\n  geom_sf(data=democracymap2 |> \n            filter(continent==\"Europe\"),\n          mapping=aes(geometry=geometry),\n          color=\"black\",\n          show.legend=FALSE) +\n  ggflags::geom_flag(data=democracymap2 |> \n                       filter(continent==\"Europe\",\n                              has_free_and_fair_election==TRUE),\n                     mapping=aes(y=lat,x=lon,country=tolower(iso2)),\n                     inherit.aes=FALSE) +\n  # gganimate allows you to use {closest_state} to fill in the transition label\n  labs(title= 'Year: {closest_state}') +\n  #metR scales\n  scale_x_longitude() +\n  scale_y_latitude() +\n  #gganimate transitions for the gif\n  transition_states(year) +\n  theme_bw() +\n  coord_sf(xlim=c(-20,40),\n           ylim=c(30,70),\n           default_crs=sf::st_crs(4326))\n\n#anim_save(filename=\"img/Europe.gif\",animation=Europe2)\n```\n:::\n\n\n![Free and Fair Elections in Europe](img/Europe.gif)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Africa\nAfrica2 <- map |> \n  filter(continent==\"Africa\") |> \n  ggplot() +\n  geom_sf(mapping=aes(geometry=geometry),fill=\"white\",color=\"black\") +\n  geom_sf(data=democracymap2 |> \n            filter(continent==\"Africa\"),\n          mapping=aes(geometry=geometry),color=\"black\",\n          show.legend=FALSE) +\n  scale_x_longitude() +\n  scale_y_latitude() +\n  ggflags::geom_flag(data=democracymap2 |> \n                       filter(continent==\"Africa\",\n                              has_free_and_fair_election==TRUE),\n                     mapping=aes(y=lat,x=lon,\n                                 country=tolower(iso2)),\n                     inherit.aes=FALSE) +\n  labs(title = 'Year: {closest_state}') +\n  theme_bw() +\n  transition_states(year) +\n  coord_sf(default_crs=sf::st_crs(4326))\n\n#anim_save(filename=\"img/Africa.gif\",animation=Africa2)\n```\n:::\n\n\n![Free and Fair Elections in Africa](img/Africa.gif)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}