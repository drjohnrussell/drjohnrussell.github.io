{
  "hash": "ecb7713e8f20df4d4e0749c0400080b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with Time to battle Baby Amnesia\"\ndescription: \"Demonstrating how the tidyverse's use of time can better help me remember my first son's sleep schedule\"\ndate: 02-04-2025\ncategories: [R, Data Wrangling, Time] # self-defined categories\nformat:\n  html:\n    code-fold: show\n    code-summary: \"Code in R\"\n    toc: TRUE\n    toc_float: TRUE\nexecute:\n  warning: false\ncitation: \n  url: https://drjohnrussell.github.io/posts/2025-02-04-plotting-sleep-intervals/ \nimage: img/sleep.png\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\n\n# Battling first child amnesia\n\nI am a father of two sons; one 4.5 years old, and the other is but a few months. This may seem weird, but even though I went through everything with my first son... I have complete amnesia about what was normal, what napping schedules were like, and such-like at this age.\n\nFortunately, we used a baby tracker, which allowed me to export a csv. What a golden opportunity for some data visualization!\n\nLet's just load up `tidyverse` and take a look...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n\nchild <- read_csv(\"https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv\")\n\nhead(child)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Baby       Time              `Duration (min)`\n  <chr>      <chr>                        <dbl>\n1 First-Born 10/23/20 4:30 AM                60\n2 First-Born 10/23/20 6:00 AM                55\n3 First-Born 10/23/20 8:31 AM                39\n4 First-Born 10/23/20 11:13 AM               28\n5 First-Born 10/23/20 3:49 PM                14\n6 First-Born 10/23/20 7:16 PM               298\n```\n\n\n:::\n:::\n\n\n\nHmmm, okay. So a few issues to deal with:\n\n-   the `Time` column is character data, instead of [POSIXct](https://r4ds.hadley.nz/datetimes.html)\n-   you have durations, instead of start times and end times\n\nWhat I would love is a graph of my son's sleep schedule, by week, that I could match up with our second child. So let's see what we can do.\n\n## Creating a tidy time dataframe\n\nThe first thing to do is make sure that the data is in time. R has many functions, which you adapt to the way that the data looks. Here, the data is in *month/day/year hour:minutes*, so we can use `mdy_hm` as the function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild <- child |> \n  mutate(starttime=mdy_hm(Time)) |> \n  select(-Time)\n   \nhead(child)         \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Baby       `Duration (min)` starttime          \n  <chr>                 <dbl> <dttm>             \n1 First-Born               60 2020-10-23 04:30:00\n2 First-Born               55 2020-10-23 06:00:00\n3 First-Born               39 2020-10-23 08:31:00\n4 First-Born               28 2020-10-23 11:13:00\n5 First-Born               14 2020-10-23 15:49:00\n6 First-Born              298 2020-10-23 19:16:00\n```\n\n\n:::\n:::\n\n\n\nWe can similarly convert the Duration to minutes and add it to the starttime to get an endtime using the `minutes` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild <- child |> \n  mutate(endtime=starttime+minutes(`Duration (min)`)) |> \n  select(-`Duration (min)`)\n\n\nhead(child)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Baby       starttime           endtime            \n  <chr>      <dttm>              <dttm>             \n1 First-Born 2020-10-23 04:30:00 2020-10-23 05:30:00\n2 First-Born 2020-10-23 06:00:00 2020-10-23 06:55:00\n3 First-Born 2020-10-23 08:31:00 2020-10-23 09:10:00\n4 First-Born 2020-10-23 11:13:00 2020-10-23 11:41:00\n5 First-Born 2020-10-23 15:49:00 2020-10-23 16:03:00\n6 First-Born 2020-10-23 19:16:00 2020-10-24 00:14:00\n```\n\n\n:::\n:::\n\n\n\n## Separating out sleep at night\n\nFor the graph I'm imagining, where rectangles on a plot where show the time sleeping, my son sleeping through the night will actually be two rectangles; one that goes in the evening until midnight, and then one the following day from midnight until he wakes up.\n\nThis show up in the dataset as ones where the day of `starttime` and `endtime` are different.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildnight <- child |> \n  filter(day(starttime) != day(endtime))\n\n## now make these into two different datasets. The evening dataset and the morning dataset\n\nchildevening <- childnight |> \n  mutate(endtime=\n           make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))\n\nchildmorning <- childnight |> \n  mutate(starttime=\n           make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))\n\n## now filter them out and bind back in\nchild <- child |> \n  filter(day(starttime) == day(endtime)) |> \n  bind_rows(childevening,childmorning)\n```\n:::\n\n\n\nNow we have a dataset! Next problem.\n\n## Translating data into weeks old\n\nBecause my two sons were not born on the same day (or even the same month), looking at the data by date is not going to be helpful; ideally, I want to look at it in how many weeks old they are.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth <- mdy(\"05-30-20\")\n```\n:::\n\n\n\nUsing this birthdate, I can find the difference in time between the times sleeping and his birth. Using the `floor` function is akin to rounding down, which will allow me to see how many weeks old the baby was when sleep occurred.\n\nIdeally, I want these dates converted into what week old, and what day of that week, factored for a plot that goes from midnight to midnight. My son was born on a Sunday, so this can go from Sunday to Saturday.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild <- child |> \n  mutate( ## this tells you how many weeks old\n    weeksold=floor(difftime(starttime, birth, units=\"weeks\")),\n          ## this translates the dates into days of the week\n    dayweek=wday(starttime,label=TRUE, ##labels over numbers,\n                 abbr=TRUE, ##abbreviated,\n                 week_start=7 ## Sunday\n                 ),\n    starthour=hm(paste0(hour(starttime),\":\",minute(starttime))),\n    endhour=hm(paste0(hour(endtime),\":\",minute(endtime)))) |> \n  select(-c(starttime,endtime))\n\nhead(child)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  Baby       weeksold dayweek starthour  endhour   \n  <chr>      <drtn>   <ord>   <Period>   <Period>  \n1 First-Born 20 weeks Fri     4H 30M 0S  5H 30M 0S \n2 First-Born 20 weeks Fri     6H 0M 0S   6H 55M 0S \n3 First-Born 20 weeks Fri     8H 31M 0S  9H 10M 0S \n4 First-Born 20 weeks Fri     11H 13M 0S 11H 41M 0S\n5 First-Born 20 weeks Fri     15H 49M 0S 16H 3M 0S \n6 First-Born 21 weeks Sat     49M 0S     7H 20M 0S \n```\n\n\n:::\n:::\n\n\n\nNow we are ready to graph!\n\n## Graphing\n\n`geom_rect` does not work well with categorical data, so we will use the fact that factors have numerical orders underneath them to graph.\n\nThis creates a funny first graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchild |> \n  filter(weeksold %in% c(21:29)) |> \n  ggplot() +\n  geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,\n                        xmax=as.numeric(dayweek)+.45,\n                        ymin=starthour,\n                        ymax=endhour),\n            fill=\"blue\", alpha=.5) +\n  facet_wrap(~weeksold)\n```\n\n::: {.cell-output-display}\n![A plot with numbers on each side...](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNotice that the y axis is in seconds since midnight, and that the x axis is in days since Sunday. Let's work with our scales to make these right\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBREAKS <- c(0:12) * 7200 ## there are 3600 seconds in an hour, so this should make breaks every 2 hours\n\nchild |> \n  filter(weeksold %in% c(21:29)) |> \n  ggplot() +\n  geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,\n                        xmax=as.numeric(dayweek)+.45,\n                        ymin=starthour,\n                        ymax=endhour),\n            fill=\"blue\", alpha=.5) +\n  facet_wrap(~weeksold) +\n  scale_y_time(breaks=BREAKS) +\n  scale_x_continuous(\n    breaks=seq_along(levels(child$dayweek)),\n    labels=levels(child$dayweek)\n  ) +\n  labs(title=\"Sleep Schedule by Weeks Old, Weeks 21-29\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![A final plot](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nA graph to be proud of, and a reminder that my first son was a far better sleeper at night than my current...",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}