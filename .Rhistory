make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(starttime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) == day(endtime)) |>
bind_rows(childevening,childmorning)
birth <- mdy("05-30-20")
child <- child |>
mutate( ## this tells you how many weeks old
weeksold=floor(difftime(starttime, birth, units="weeks")),
## this translates the dates into days of the week
dayweek=wday(starttime,label=TRUE, ##labels over numbers,
abbr=TRUE, ##abbreviated,
week_start=7 ## Sunday
),
starthour=hm(paste0(hour(starttime),":",minute(starttime))),
endhour=hm(paste0(hour(endtime),":",minute(endtime)))) |>
select(-c(starttime,endtime))
head(child)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold)
BREAKS <- c(0:12) * 7200 ## there are 3600 seconds in an hour, so this should make breaks every 2 hours
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
#| fig-cap: "That looks a bit like an H-R diagram"
library(tidyverse)
# let's not work in scientific notation unless we specify it
options(scipen = 999)
stars <- read_csv("data/hygdata_v41.csv") |>
filter(dist < 100000)
p <-stars |>
ggplot(aes(x=ci, y=lum)) +
geom_point(size=0.02) +
scale_y_log10() +
theme_bw()
p
library(ggExtra)
ggMarginal(p,
type="histogram"
)
library(RColorBrewer)
stars |>
ggplot(aes(x=ci, y=lum,color=ci)) +
geom_point(size=0.02, show.legend=FALSE) +
scale_y_log10() +
scale_x_continuous(limits=c(-.5,2.25))+
scale_color_gradient2(low= "blue", mid="white", high="red",midpoint=0.75) +
theme_minimal() +
theme(panel.background=element_rect(fill="black"),
panel.grid=element_blank()) +
labs(title="Hertzsprung-Russell Diagram",
y="Luminosity (in comparison to Sun)",
x="Color Index (blue magnitude - visual magnitude)")
library(ggforce)
stars |>
ggplot(aes(x=ci, y=lum)) +
geom_point(aes(color=ci),size=0.02) +
scale_y_log10() +
scale_x_continuous(limits=c(-.5,2.25))+
scale_color_gradient2(low= "blue", mid="white", high="red",midpoint=0.75) +
theme_minimal() +
guides(color="none") +
theme(panel.background=element_rect(fill="black"),
panel.grid=element_blank()) +
labs(title="Hertzsprung-Russell Diagram",
y="Luminosity (in comparison to Sun)",
x="Color Index (blue magnitude - visual magnitude)")
p <- stars |>
ggplot(aes(x=ci, y=lum,color=ci)) +
geom_point(size=0.02, show.legend=FALSE) +
scale_y_log10() +
scale_x_continuous(limits=c(-.5,2.25))+
scale_color_gradient2(low= "blue", mid="white", high="red",midpoint=0.75) +
theme_minimal() +
theme(panel.background=element_rect(fill="black"),
panel.grid=element_blank()) +
labs(title="Hertzsprung-Russell Diagram",
y="Luminosity (in comparison to Sun)",
x="Color Index (blue magnitude - visual magnitude)")
ggsave("HR.png",p)
ggsave("HR.png",p,bg="white")
#| fig-cap: "That looks a bit like an H-R diagram"
library(tidyverse)
# let's not work in scientific notation unless we specify it
options(scipen = 999)
stars <- read_csv("data/hygdata_v41.csv") |>
filter(dist < 100000)
p <-stars |>
ggplot(aes(x=ci, y=lum)) +
geom_point(size=0.02) +
scale_y_log10() +
theme_bw()
p
library(ggExtra)
ggMarginal(p,
type="histogram"
)
library(ggExtra)
p <- ggMarginal(p,
type="histogram"
)
ggsave("marginal.png",p,bg="white")
#| fig-cap: "That looks a bit like an H-R diagram"
library(tidyverse)
# let's not work in scientific notation unless we specify it
options(scipen = 999)
stars <- read_csv("data/hygdata_v41.csv") |>
filter(dist < 100000)
p <-stars |>
ggplot(aes(x=ci, y=lum)) +
geom_point(size=0.02) +
scale_y_log10() +
theme_bw()
p
View(stars)
stars <- read_csv("data/hygdata_v41.csv") |>
filter(dist < 100000,
is.na(var))
p <-stars |>
ggplot(aes(x=ci, y=lum)) +
geom_point(size=0.02) +
scale_y_log10() +
theme_bw()
p
library(tidyverse)
library(HistData)
library(plotly)
data("Pollen")
head(Pollen)
res <- cor(Pollen)
round(res,2)
library(RSocrata)
library(tidyverse)
accidents <- read.socrata("https://data.cityofnewyork.us/api/odata/v4/h9gi-nx95")
head(accidents)
View(accidents)
accidents2 <- accidents |>
mutate(dayofweek=wday(crash_date))
View(accidents2)
?wday
accidents2 <- accidents |>
mutate(dayofweek=wday(crash_date, label=TRUE, abbr=TRUE))
View(accidents2)
accidents2 <- accidents |>
mutate(dayofweek=wday(crash_date, label=TRUE, abbr=TRUE),
time=hm(crash_time))
View(accidents2)
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=..density..), fill="blue", alpha=0.5)
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=..density..), fill="blue", alpha=0.5) +
scale_x_time(breaks = seq(0, 24, by = 1),
labels = function(x) format(x, "%H:%M"))
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=..density..), fill="blue", alpha=0.5) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density)), fill="blue", alpha=0.5) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_histogram() +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density)), fill="blue", alpha=0.5) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),fill=contributing_factor_vehicle_1), alpha=0.5) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),fill=contributing_factor_vehicle_1), alpha=0.5,show.legend=FALSE) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
janitor::tabyl(contributing_factor_vehicle_1)
install.packages("janitor")
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
janitor::tabyl(contributing_factor_vehicle_1)
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),fill=contributing_factor_vehicle_1), alpha=0.5,show.legend=FALSE) +
scale_x_time()
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
janitor::tabyl(contributing_factor_vehicle_1)
accidents2 |>
filter(!dayofweek %in% c("Sat","Sun")) |>
janitor::tabyl(contributing_factor_vehicle_1) |>
arrange(desc(n))
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),fill= dayofweek %in% c("Sat","Sun")), alpha=0.5,show.legend=FALSE) +
scale_x_time()
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek %in% c("Sat","Sun")), alpha=0.5,show.legend=FALSE) +
scale_x_time()
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek %in% c("Sat","Sun")), alpha=0.5) +
scale_x_time()
accidents2 |>
ggplot(aes(x=time)) +
geom_histogram(aes(color= dayofweek %in% c("Sat","Sun")), alpha=0.5) +
scale_x_time()
?geom_histogram
accidents2 |>
ggplot(aes(x=time)) +
geom_histogram(aes(color= dayofweek), alpha=0.5) +
scale_x_time()
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek), alpha=0.5) +
scale_x_time()
?scale_x_time
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek), alpha=0.5) +
scale_x_time(breaks="1 hours")
BREAKS <- c(0, 6,12,18,24)*3600
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek), alpha=0.5) +
scale_x_time(breaks=BREAKS)
BREAKS <- c(0,3,6,9,12,15,18,21,24)*3600
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek), alpha=0.5) +
scale_x_time(breaks=BREAKS)
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek %in% c("Sat","Sun")), alpha=0.5) +
scale_x_time()
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek %in% c("Sat","Sun")), alpha=0.5) +
scale_x_time(breaks=BREAKS))
accidents2 |>
ggplot(aes(x=time)) +
geom_density(aes(y=after_stat(density),color= dayofweek %in% c("Sat","Sun")), alpha=0.5) +
scale_x_time(breaks=BREAKS)
install.packages("leaflet")
library(leaflet)
fatalities <- accidents |>
filter(number_of_persons_killed > 0)
View(fatalities)
install.packages("osmdata")
library(osmdata)
NYC <- getbb("New York City")
available_features()
install.packages("ggmap")
library(ggmap)
NYCmap <- get_map(NYC, maptype = "roadmap")
register_google(key="AIzaSyCKKvAjq5sGSn_7bl3yvNlJDOBi5fnTVUU", write=TRUE)
NYCmap <- get_map(NYC, maptype = "roadmap")
ggmap(NYCmap) +
geom_point(data = fatalities, aes(x = longitude, y = latitude), color = "red", alpha = 0.5)
ggmap(NYCmap) +
geom_density(data=fatalities, aes(x=longitude, y=latitude),
alpha=0.5, fill="red", color="red") +
```
ggmap(NYCmap) +
geom_density(data=fatalities, aes(x=longitude, y=latitude),
alpha=0.5, fill="red", color="red")
ggmap(NYCmap) +
geom_density(data=fatalities, aes(x=longitude, y=latitude))
?ggmap
ggmap(NYCmap) +
geom_density_2d(data=fatalities, aes(x=longitude, y=latitude))
ggmap(NYCmap) +
geom_density_2d_filled(data=fatalities, aes(x=longitude, y=latitude))
ggmap(NYCmap) +
geom_density_2d_filled(data=fatalities, aes(x=longitude, y=latitude),alpha=.3)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude, color = dayofweek),
alpha = 0.5,
size = 0.5
)
fatalities <- accidents2 |>
filter(number_of_persons_killed > 0)
ggmap(NYCmap) +
geom_point(
data = fatalities2,
aes(x = longitude, y = latitude, color = dayofweek),
alpha = 0.5,
size = 0.5
)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude, color = dayofweek),
alpha = 0.5,
size = 0.5
)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.5,
size = 0.5
)
NYC <- getbb("Manhattan")
NYCmap <- get_map(NYC, maptype = "roadmap")
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.5,
size = 0.5
)
NYC <- getbb("New York City")
NYCmap <- get_map(NYC, maptype = "roadmap")
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.5,
size = 0.5
)
?geom_density_2d_filled
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5
) +
geom_density_2d_filled(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5,
bins = 20
)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5
) +
geom_density_2d_filled(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5,
bins = 20,
show.legend=FALSE
)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5
) +
geom_density_2d_filled(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.2,
size = 0.5,
bins = 20,
show.legend=FALSE
)
ggmap(NYCmap) +
geom_point(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.3,
size = 0.5
) +
geom_density_2d_filled(
data = fatalities,
aes(x = longitude, y = latitude),
alpha = 0.2,
size = 0.5,
bins = 20,
show.legend=FALSE
)
library(tidyverse)
library(sf)
library(rnaturalearth)
library(ggview)
tuesdata <- tidytuesdayR::tt_load(2025, week = 33)
scottish_munros <- tuesdata$scottish_munros
scotland <- ne_countries(geounit = "scotland", type = "map_units", scale="large")
projection <- st_as_sf(scottish_munros |>
filter(!is.na(xcoord),
!is.na(ycoord)),
coords=c("xcoord","ycoord"),
crs = 27700) |>
st_transform(crs=4326) |>
st_coordinates()
scottish_munros <- scottish_munros |>
filter(!is.na(xcoord)) |>
cbind(projection)
water <- ne_download(scale=10, type="lakes", category="physical")
river <- ne_download(scale=10, type="rivers_lake_centerlines", category="physical")
View(river)
?st_coordinates
library(tidyverse)
library(sf)
library(rnaturalearth)
library(ggview)
tuesdata <- tidytuesdayR::tt_load(2025, week = 33)
scottish_munros <- tuesdata$scottish_munros
scotland <- ne_countries(geounit = "scotland", type = "map_units", scale="large")
water <- ne_download(scale=10, type="lakes", category="physical")
river <- ne_download(scale=10, type="rivers_lake_centerlines", category="physical")
sf_use_s2(FALSE)
waterscotland <- st_filter(water,scotland)
riverscotland <- st_filter(river, scotland)
projection <- st_as_sf(scottish_munros |>
filter(!is.na(xcoord),
!is.na(ycoord)),
coords=c("xcoord","ycoord"),
crs = 27700) |>
st_transform(crs=4326) |>
st_coordinates()
scottish_munros <- scottish_munros |>
filter(!is.na(xcoord)) |>
cbind(projection)
map <- scotland |>
ggplot() +
geom_sf() +
geom_sf(data=waterscotland, fill="blue") +
geom_sf(data=riverscotland, color="blue") +
geom_point(data=scottish_munros |>
filter(!is.na(`2021`)),
aes(x=X, y=Y, color=`2021`),shape="^", size=3) +
theme_light() +
coord_sf(xlim=c(-10,0)) +
scale_color_brewer(palette="Dark2", direction=-1) +
labs(color="",
title="Munros of Scotland, as classified in 2021",
subtitle="Effect of the Great-Glen Fault",
caption="TidyTuesday") +
theme(legend.position="bottom",
legend.margin=margin(0,0,0,0),
plot.title.position="plot",
axis.title = element_blank(),
panel.background = element_rect(fill="lightblue"),
legend.key = element_rect(fill = NA))
map
# map + canvas(width=4.5, height=4.5, units="in")
ggsave(map, width=4.5, height=4.5, units="in", filename="img/scotlandmap.png")
library(RSocrata)
library(tidyverse)
library(osmdata)
library(ggmap)
accidents <- read.socrata("https://data.cityofnewyork.us/api/odata/v4/h9gi-nx95")
accidents2 <- accidents |>
mutate(dayofweek=wday(crash_date, label=TRUE, abbr=TRUE),
time=hm(crash_time))
