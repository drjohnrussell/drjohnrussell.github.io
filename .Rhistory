devtools::install_github('jimjam-slam/ggflags')
install.packages("devtools")
devtools::install_github('jimjam-slam/ggflags')
library(tidytuesdayR)
library(tidyverse)
library(countrycode) #this package looks up ISO codes, which can be useful
library(ggflags) #pulls flags
library(gganimate) #animations
dat <- tidytuesdayR::tt_load(2024, week = 45)
democracy <- dat$democracy_data
head(democracy)
democracy <- democracy |>
## removing colonies as much as possible to get down to countries
filter(!is.na(regime_category_index),
## British Virgin Islands oddly keeps showing up in spite of status as colony
country_code!="VGB")
library(tidytuesdayR)
library(tidyverse)
library(countrycode) #this package looks up ISO codes, which can be useful
library(ggflags) #pulls flags
library(gganimate) #animations
dat <- tidytuesdayR::tt_load(2024, week = 45)
democracy <- dat$democracy_data
head(democracy)
democracy <- democracy |>
## removing colonies as much as possible to get down to countries
filter(!is.na(regime_category_index),
## British Virgin Islands oddly keeps showing up in spite of status as colony
country_code!="VGB")
democracyfilter <- democracy |>
janitor::tabyl(country_name,has_free_and_fair_election) |>
filter(`TRUE` > 0 & `FALSE` > 0)
democraticchanges <- democracy |>
inner_join(democracyfilter) |>
mutate(iso2=countrycode(country_name,"country.name","iso2c"),
continent = countrycode(iso2, "iso2c", "continent")) |>
arrange(continent,`FALSE`) |>
mutate(country_name=fct_inorder(country_name))
## Let's create the y-labels for later on
y_lab <- democraticchanges |>
distinct(country_name,iso2,continent)  |>
mutate(y_mid = as.numeric(country_name),
name=country_name)
## For Africa
Africa <- democraticchanges |>
filter(continent=="Africa") |>
ggplot(aes(xmin=year, #left boundary of the rectangle
xmax=year+1, #right boundary of the rectangle
ymin=as.numeric(country_name)-.3, #lower boundary of the rectangle
ymax=as.numeric(country_name)+.3, #upper boundary of the rectangle
fill=has_free_and_fair_election)) +
geom_rect() +
# now let's plot flags between the rectangles and the y axis
ggflags::geom_flag(data=y_lab |>
filter(continent=="Africa"),
mapping=aes(y=y_mid,
country=tolower(iso2), #ggflags needs lowercase iso2 to work
x=1945),
inherit.aes=FALSE) + #we want this to be individual to this layer
#now to rename the y axis
scale_y_continuous(breaks=y_lab$y_mid,labels=y_lab$country_name) +
theme_minimal() +
theme(legend.position="bottom",
legend.text=element_text(size=7),
legend.title=element_text(size=7)) +
labs(x="",
y="",
fill="Has Free and Fair Elections") +
scale_fill_brewer(palette="Set1") +
facet_wrap(~continent,ncol=1,scales="free",strip.position="right")
Europe <- democraticchanges |>
filter(continent=="Europe") |>
ggplot(aes(xmin=year,
xmax=year+1,
ymin=as.numeric(country_name)-.3,
ymax=as.numeric(country_name)+.3,
fill=has_free_and_fair_election)) +
geom_rect() +
ggflags::geom_flag(data=y_lab |>
filter(continent=="Europe"),
mapping=aes(y=y_mid,country=tolower(iso2),x=1945),inherit.aes=FALSE) +
scale_y_continuous(breaks=y_lab$y_mid,labels=y_lab$country_name) +
theme_minimal() +
theme(legend.position="bottom",
legend.text=element_text(size=7),
legend.title=element_text(size=7)) +
labs(x="",
y="",
fill="Has Free and Fair Elections") +
scale_fill_brewer(palette="Set1") +
facet_wrap(~continent,ncol=1,scales="free",strip.position="right")
## Let's take advantage of patchwork to plot these graphs next to each other with a common legend
library(patchwork)
Europe + Africa + plot_layout(guides = 'collect') & theme(legend.position = 'bottom')
git add -A
install.packages("RSocrata")
git add -A
library(tidyverse)
child <- read_csv("https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv")
summary(child)
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time))
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
head(child)
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)) |>
head()
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)`) |>
head()
head(child)
childnight <- child |>
filter(day(starttime) != day(endtime))
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(startime), day(starttime), hour=23, min=59, sec=59))
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(startime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) != day(endtime)) |>
bind_rows(childevening,childmorning)
child <- read_csv("https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv")
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
childnight <- child |>
filter(day(starttime) != day(endtime))
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)`)
head(child)
childnight <- child |>
filter(day(starttime) != day(endtime))
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(startime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) != day(endtime)) |>
bind_rows(childevening,childmorning)
child <- read_csv("https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv")
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
head(child)
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)`)
head(child)
childnight <- child |>
filter(day(starttime) != day(endtime))
## now make these into two different datasets. The evening dataset and the morning dataset
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(startime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) == day(endtime)) |>
bind_rows(childevening,childmorning)
birth <- mdy("05-30-20")
?wday
wday("2020-05-20")
wday("2020-05-30")
?hm
child <- child |>
mutate( ## this tells you how many weeks old
weeksold=floor(difftime(starttime, birth, units="weeks")),
## this translates the dates into days of the week
dayweek=wday(starttime,label=TRUE, ##labels over numbers,
abbr=FALSE, ##non-abbreviated,
week_start=7 ## Sunday
),
starthour=hm(paste0(hour(starttime),":",minute(starttime))),
endhour=hm(paste0(hour(endtime),":",minute(endtime)))) |>
select(-c(starttime,endtime))
head(child)
library(tidyverse)
child <- read_csv("https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv")
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
head(child)
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)`)
head(child)
childnight <- child |>
filter(day(starttime) != day(endtime))
## now make these into two different datasets. The evening dataset and the morning dataset
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(starttime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) == day(endtime)) |>
bind_rows(childevening,childmorning)
head(child)
birth <- mdy("05-30-20")
child <- child |>
mutate( ## this tells you how many weeks old
weeksold=floor(difftime(starttime, birth, units="weeks")),
## this translates the dates into days of the week
dayweek=wday(starttime,label=TRUE, ##labels over numbers,
abbr=FALSE, ##non-abbreviated,
week_start=7 ## Sunday
),
starthour=hm(paste0(hour(starttime),":",minute(starttime))),
endhour=hm(paste0(hour(endtime),":",minute(endtime)))) |>
select(-c(starttime,endtime))
head(child)
BREAKS <- c(0:12)\*7200
BREAKS <- c(0:12)*7200
child |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold)
child |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS)
24*60
1440*60
?scale_y_time
child |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS,
date_labels="%H:%M") +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
)
?date_format
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS,
labels=label_time(format="%H:%M")) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_bw()
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_minimal()
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
library(tidyverse)
child <- read_csv("https://github.com/drjohnrussell/drjohnrussell.github.io/raw/refs/heads/master/posts/2025-01-30-plotting-sleep-intervals/data/baby.csv")
head(child)
child <- child |>
mutate(starttime=mdy_hm(Time)) |>
select(-Time)
head(child)
child <- child |>
mutate(endtime=starttime+minutes(`Duration (min)`)) |>
select(-`Duration (min)`)
head(child)
childnight <- child |>
filter(day(starttime) != day(endtime))
## now make these into two different datasets. The evening dataset and the morning dataset
childevening <- childnight |>
mutate(endtime=
make_datetime(year(starttime), month(starttime), day(starttime), hour=23, min=59, sec=59))
childmorning <- childnight |>
mutate(starttime=
make_datetime(year(endtime), month(endtime), day(endtime), hour=0, min=0, sec=0))
## now filter them out and bind back in
child <- child |>
filter(day(starttime) == day(endtime)) |>
bind_rows(childevening,childmorning)
birth <- mdy("05-30-20")
child <- child |>
mutate( ## this tells you how many weeks old
weeksold=floor(difftime(starttime, birth, units="weeks")),
## this translates the dates into days of the week
dayweek=wday(starttime,label=TRUE, ##labels over numbers,
abbr=TRUE, ##abbreviated,
week_start=7 ## Sunday
),
starthour=hm(paste0(hour(starttime),":",minute(starttime))),
endhour=hm(paste0(hour(endtime),":",minute(endtime)))) |>
select(-c(starttime,endtime))
head(child)
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold)
BREAKS <- c(0:12) * 7200 ## there are 3600 seconds in an hour, so this should make breaks every 2 hours
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
child |>
filter(weeksold %in% c(21:29)) |>
ggplot() +
geom_rect(mapping=aes(xmin=as.numeric(dayweek)-.45,
xmax=as.numeric(dayweek)+.45,
ymin=starthour,
ymax=endhour),
fill="blue", alpha=.5) +
facet_wrap(~weeksold) +
scale_y_time(breaks=BREAKS) +
scale_x_continuous(
breaks=seq_along(levels(child$dayweek)),
labels=levels(child$dayweek)
) +
labs(title="Sleep Schedule by Weeks Old, Weeks 21-29") +
theme_light()
